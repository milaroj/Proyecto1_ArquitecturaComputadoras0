#include <stdio.h>
#include <time.h>

#define N 64  // Tamaño de las matrices (64x64)

// ============================================================================
// MATRICES A Y B PREDEFINIDAS (Variables globales)
// ============================================================================

// Las primeras 4 filas tienen valores del 0-9 en patrón repetitivo, resto de filas (5-63) se inicializan automáticamente con ceros.


double A[N][N] = {
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4},
    {2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5},
    {3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6},
    {4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7},
};

double B[N][N] = {
    {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3},
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4},
    {2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5},
    {3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6},
};

// ============================================================================
// FUNCIÓN: multiplicarMatrices
// ============================================================================
// Multiplica dos matrices A y B, guardando el resultado en C
// Implementa el algoritmo  C[i][j] = suma de A[i][k] * B[k][j]
// 
// Parámetros:
//   - A: Primera matriz (64x64)
//   - B: Segunda matriz (64x64)
//   - C: Matriz resultado donde se guarda A × B (64x64)
// ============================================================================
void multiplicarMatrices(double A[N][N], double B[N][N], double C[N][N]) {
    // Recorrer cada fila de A
    for (int i = 0; i < N; i++) {
        // Recorrer cada columna de B
        for (int j = 0; j < N; j++) {
            // Inicializar el elemento C[i][j] en 0
            C[i][j] = 0.0;
            
            // Calcular el producto punto: suma de A[i][k] * B[k][j]
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

// ============================================================================
// FUNCIÓN PRINCIPAL
// ============================================================================
int main() {
    // Declarar la matriz resultado C (64x64)
    double C[N][N];
    
    printf("=== MULTIPLICACIÓN DE MATRICES 64x64 ===\n\n");
    
    // Mostrar una pequeña muestra de las matrices A y B (primeros 3 elementos)
    printf("Matriz A (muestra):\n");
    printf("  A[0][0] = %.0f,  A[0][1] = %.0f,  A[0][2] = %.0f\n", A[0][0], A[0][1], A[0][2]);
    
    printf("\nMatriz B (muestra):\n");
    printf("  B[0][0] = %.0f,  B[0][1] = %.0f,  B[0][2] = %.0f\n\n", B[0][0], B[0][1], B[0][2]);
    
    // ========================================================================
    // MEDICIÓN DE TIEMPO: Inicio
    // ========================================================================
    // clock() devuelve el número de "ticks" del procesador desde que inició
    clock_t inicio = clock();
    
    // ========================================================================
    // AQUÍ SE REALIZA LA MULTIPLICACIÓN
    // ========================================================================
    multiplicarMatrices(A, B, C);
    
        

    // ========================================================================
    // MOSTRAR RESULTADOS
    // ========================================================================
    printf("✓ Multiplicación completada!\n");
    printf("  Tiempo de ejecución: %.6f segundos\n\n", tiempo);
    
    // Mostrar algunos valores del resultado para verificar
    printf("Matriz C (resultado - muestra):\n");
    printf("  C[0][0]   = %.2f\n", C[0][0]);
    printf("  C[0][1]   = %.2f\n", C[0][1]);
    printf("  C[1][0]   = %.2f\n", C[1][0]);
    printf("  C[63][63] = %.2f\n", C[N-1][N-1]);
    
    return 0;  
}